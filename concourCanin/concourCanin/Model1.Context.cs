//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace concourCanin
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CONCOURSCANINEntities : DbContext
    {
        public CONCOURSCANINEntities()
            : base("name=CONCOURSCANINEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CHIEN> CHIENs { get; set; }
        public virtual DbSet<CONCOUR> CONCOURS { get; set; }
        public virtual DbSet<PARTICIPE> PARTICIPEs { get; set; }
        public virtual DbSet<PROPRIETAIRE> PROPRIETAIREs { get; set; }
        public virtual DbSet<VUEBATARD> VUEBATARDs { get; set; }
        public virtual DbSet<VUERACE> VUERACEs { get; set; }
    
        public virtual ObjectResult<Nullable<int>> CountQuery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountQuery");
        }
    
        public virtual int pCONCOURS_INSERT(string codeConcours, string adresse, string cpconcours, Nullable<System.DateTime> dateconcours, string salle, string ville)
        {
            var codeConcoursParameter = codeConcours != null ?
                new ObjectParameter("codeConcours", codeConcours) :
                new ObjectParameter("codeConcours", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("adresse", adresse) :
                new ObjectParameter("adresse", typeof(string));
    
            var cpconcoursParameter = cpconcours != null ?
                new ObjectParameter("cpconcours", cpconcours) :
                new ObjectParameter("cpconcours", typeof(string));
    
            var dateconcoursParameter = dateconcours.HasValue ?
                new ObjectParameter("dateconcours", dateconcours) :
                new ObjectParameter("dateconcours", typeof(System.DateTime));
    
            var salleParameter = salle != null ?
                new ObjectParameter("salle", salle) :
                new ObjectParameter("salle", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("ville", ville) :
                new ObjectParameter("ville", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pCONCOURS_INSERT", codeConcoursParameter, adresseParameter, cpconcoursParameter, dateconcoursParameter, salleParameter, villeParameter);
        }
    
        public virtual int pPARTICIPE_INSERT(string codeprop, string codechien, string codeconc, Nullable<int> note)
        {
            var codepropParameter = codeprop != null ?
                new ObjectParameter("codeprop", codeprop) :
                new ObjectParameter("codeprop", typeof(string));
    
            var codechienParameter = codechien != null ?
                new ObjectParameter("codechien", codechien) :
                new ObjectParameter("codechien", typeof(string));
    
            var codeconcParameter = codeconc != null ?
                new ObjectParameter("codeconc", codeconc) :
                new ObjectParameter("codeconc", typeof(string));
    
            var noteParameter = note.HasValue ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pPARTICIPE_INSERT", codepropParameter, codechienParameter, codeconcParameter, noteParameter);
        }
    
        public virtual int pPROPRIETAIRE_INSERT(string codeprop, string adresse, string cp, string nom, string prenom, string ville)
        {
            var codepropParameter = codeprop != null ?
                new ObjectParameter("codeprop", codeprop) :
                new ObjectParameter("codeprop", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("adresse", adresse) :
                new ObjectParameter("adresse", typeof(string));
    
            var cpParameter = cp != null ?
                new ObjectParameter("cp", cp) :
                new ObjectParameter("cp", typeof(string));
    
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("prenom", prenom) :
                new ObjectParameter("prenom", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("ville", ville) :
                new ObjectParameter("ville", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pPROPRIETAIRE_INSERT", codepropParameter, adresseParameter, cpParameter, nomParameter, prenomParameter, villeParameter);
        }
    
        public virtual int upadteChienRace(string codechien, string codeproprietaire, Nullable<System.DateTime> ddnchien, string nomchien, string race, string robe)
        {
            var codechienParameter = codechien != null ?
                new ObjectParameter("codechien", codechien) :
                new ObjectParameter("codechien", typeof(string));
    
            var codeproprietaireParameter = codeproprietaire != null ?
                new ObjectParameter("codeproprietaire", codeproprietaire) :
                new ObjectParameter("codeproprietaire", typeof(string));
    
            var ddnchienParameter = ddnchien.HasValue ?
                new ObjectParameter("ddnchien", ddnchien) :
                new ObjectParameter("ddnchien", typeof(System.DateTime));
    
            var nomchienParameter = nomchien != null ?
                new ObjectParameter("nomchien", nomchien) :
                new ObjectParameter("nomchien", typeof(string));
    
            var raceParameter = race != null ?
                new ObjectParameter("race", race) :
                new ObjectParameter("race", typeof(string));
    
            var robeParameter = robe != null ?
                new ObjectParameter("robe", robe) :
                new ObjectParameter("robe", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upadteChienRace", codechienParameter, codeproprietaireParameter, ddnchienParameter, nomchienParameter, raceParameter, robeParameter);
        }
    
        public virtual int upadteChienBatard(string codechien, string codeproprietaire, Nullable<System.DateTime> ddnchien, string nomchien, string caracteristique)
        {
            var codechienParameter = codechien != null ?
                new ObjectParameter("codechien", codechien) :
                new ObjectParameter("codechien", typeof(string));
    
            var codeproprietaireParameter = codeproprietaire != null ?
                new ObjectParameter("codeproprietaire", codeproprietaire) :
                new ObjectParameter("codeproprietaire", typeof(string));
    
            var ddnchienParameter = ddnchien.HasValue ?
                new ObjectParameter("ddnchien", ddnchien) :
                new ObjectParameter("ddnchien", typeof(System.DateTime));
    
            var nomchienParameter = nomchien != null ?
                new ObjectParameter("nomchien", nomchien) :
                new ObjectParameter("nomchien", typeof(string));
    
            var caracteristiqueParameter = caracteristique != null ?
                new ObjectParameter("caracteristique", caracteristique) :
                new ObjectParameter("caracteristique", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upadteChienBatard", codechienParameter, codeproprietaireParameter, ddnchienParameter, nomchienParameter, caracteristiqueParameter);
        }
    }
}
